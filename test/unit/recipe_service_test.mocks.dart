// Mocks generated by Mockito 5.4.5 from annotations
// in recipe_app/test/unit/recipe_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:recipe_app/data/models/recipe.dart' as _i4;
import 'package:recipe_app/data/models/recipe_type.dart' as _i5;
import 'package:recipe_app/data/services/recipe_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RecipeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeService extends _i1.Mock implements _i2.RecipeService {
  MockRecipeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Recipe>> getRecipesStream() => (super.noSuchMethod(
        Invocation.method(
          #getRecipesStream,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Recipe>>.empty(),
      ) as _i3.Stream<List<_i4.Recipe>>);

  @override
  _i3.Future<List<_i5.RecipeType>> getRecipeTypes() => (super.noSuchMethod(
        Invocation.method(
          #getRecipeTypes,
          [],
        ),
        returnValue: _i3.Future<List<_i5.RecipeType>>.value(<_i5.RecipeType>[]),
      ) as _i3.Future<List<_i5.RecipeType>>);

  @override
  _i3.Future<void> addRecipe(_i4.Recipe? recipe) => (super.noSuchMethod(
        Invocation.method(
          #addRecipe,
          [recipe],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateRecipe(_i4.Recipe? recipe) => (super.noSuchMethod(
        Invocation.method(
          #updateRecipe,
          [recipe],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteRecipe(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecipe,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i4.Recipe? getRecipeById(String? id) =>
      (super.noSuchMethod(Invocation.method(
        #getRecipeById,
        [id],
      )) as _i4.Recipe?);
}
